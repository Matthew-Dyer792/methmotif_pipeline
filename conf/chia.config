/*
========================================================================================
    Nextflow config file for running on chia
========================================================================================
    Defines everything required to run the pipeline on the chia LSF cluster.

----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'chia profile'
    config_profile_description = 'Increased setting to allow for pipeline execution on chia LSF cluster'

    // Limit resources so that this can run on normal queue
    max_cpus   = 32
    max_memory = 60.GB
    max_time   = 72.h
}

conda {
    // set conda cacheDir
    cacheDir = "/research/project/shared/benoukraf_lab/.conda_cache/"
}

singularity {
    // set singularity cacheDir
    cacheDir    = "/research/project/shared/benoukraf_lab/.singularity_cache"
}

executor {
    name            = 'lsf'
    queue           = 'normal'
    perJobMemLimit  = '56 GB'
    jobName         = 'methmotif_pipeline'
    queueSize       = 75
    submitRateLimit = '4/1sec'
}

process {
    cpus = { check_max( 1, 'cpus') }
    memory = { check_max( 8.GB, 'memory') }
    time = { check_max( 8.h, 'time') }

    errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'

    // Resource requirements
    withLabel:process_low {
        cpus = { check_max( 4, 'cpus') }
        memory = { check_max( 16.GB, 'memory') }
        time = { check_max( 6.h, 'time') }
    }
    withLabel:process_medium {
        cpus = { check_max( 8, 'cpus') }
        memory = { check_max( 32.GB, 'memory') }
        time = { check_max( 1.d, 'time') }
    }
    withLabel:process_high {
        cpus = { check_max( 28, 'cpus') }
        memory = { check_max( 56.GB, 'memory') }
        time = { check_max( 2.d, 'time') }
    }
}

/*
process {
    // Resource requirements
    withLabel:process_low {
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory') }
        time = { check_max( 6.h * task.attempt, 'time') }
    }
    withLabel:process_medium {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 32.GB * task.attempt, 'memory') }
        time = { check_max( 1.d * task.attempt, 'time') }
    }
    withLabel:process_high {
        cpus = { check_max( 16 * task.attempt, 'cpus') }
        memory = { check_max( 56.GB * task.attempt, 'memory') }
        time = { check_max( 2.d * task.attempt, 'time') }
    }
    withLabel:align {
        cpus = { check_max( 28 * task.attempt, 'cpus') }
        memory = { check_max( 56.GB * task.attempt, 'memory') }
        time = { check_max( 2.d * task.attempt, 'time') }
    }
}
*/