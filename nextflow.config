// Global default params, used in configs
params {
    // Input options
    chip_input                 = null
    bs_input                   = null
    // single_end                 = false
    workflow                   = null

    // fastp options
    fastp_adapter_fasta        = []
    fastp_save_trimmed_fail    = false
    fastp_save_merged          = false

    // star options
    star_index                 = '/research/project/shared/benoukraf_lab/matthew/data/mm10/index_star_no_model'
    star_gtf                   = []
    star_ignore_sjdbgtf        = true
    star_seq_platform          = false
    star_seq_center            = false

    // multiqc options
    multiqc_config             = []
    extra_multiqc_config       = []
    multiqc_logo               = []

    // samtools options
    samtools_fasta             = '/research/project/shared/benoukraf_lab/matthew/data/mm10/mm10.fa'

    // bismark options
    bismark_index              = '/research/project/shared/benoukraf_lab/matthew/data/mm10'

    // Boilerplate options
    outdir                     = './results'
    publish_dir_mode           = 'copy'
    conda_flag                 = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '64.GB'
    max_cpus                   = 32
    max_time                   = '240.h'

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

// import statement for execution profiles
profiles {
    laptop       { includeConfig 'conf/laptop.config'   }
    chia         { includeConfig 'conf/chia.config'     }
    server       { includeConfig 'conf/server.config'   }
    conda {
        conda_flag             = true
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
}

//
// Generic process options for all workflows
//
process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withLabel:process_single {
        cpus = 1
        memory = 4.GB
        time = 6.h
    }

}

process {
    withName: FASTP_CHIP {
        // should replace this with parameters
        // left this out due to short reads , "--length_required 30"
        ext.args = { [
            "--cut_right", "--cut_right_window_size 4", "--cut_right_mean_quality 20"
        ].join(' ') }
    }

    withName: FASTQC_TRIM_CHIP {
        ext.prefix = { "${meta.id}.trimmed" }
        errorStrategy = 'ignore'
    }

    withName: STAR_ALIGN {
        // ext.when = 'task.process.FASTQC_RAW_CHIP.completed'
        // ext.when = { ${task.process.FASTQC_RAW_CHIP.completed} }
        ext.args = { [
            "--readFilesCommand gunzip -c", "--alignIntronMax 1", "--alignEndsType EndToEnd",
            "--outFilterMultimapNmax 1", "--outFilterMatchNminOverLread 0.80", "--outSAMtype BAM Unsorted"
        ].join(' ') }
        // errorStrategy = 'terminate'
    }

    withName: BISMARK_ALIGN {
        queue = "bio-analysis-lm"
        cpus = 48
        memory = 220.GB
        ext.args = { [
            "--bowtie2", "--multicore 16", "--phred33-quals"
        ].join(' ') }
    }

    withName: BISMARK_METHYLATIONEXTRACTOR {
        queue = "bio-analysis-lm"
        cpus = 48
        memory = 220.GB
        ext.args = { [
            "--comprehensive", "--multicore 16", "--buffer_size 50%", "--cytosine_report", "--genome_folder ${index}"
        ].join(' ') }
    }
}