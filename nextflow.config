// Global default params, used in configs
params {
    // Input options
    chip_input                 = null
    bs_input                   = null
    // single_end                 = false
    workflow                   = null

    // fastp options
    fastp_adapter_fasta        = null
    fastp_save_trimmed_fail    = false
    fastp_save_merged          = false

    // star options
    star_index                 = '/research/project/shared/benoukraf_lab/matthew/data/mm10/index_star_no_model'
    star_gtf                   = null
    star_ignore_sjdbgtf        = true
    star_seq_platform          = null
    star_seq_center            = null

    // multiqc options
    multiqc_config             = null
    extra_multiqc_config       = null
    multiqc_logo               = null

    // samtools options
    samtools_fasta             = '/research/project/shared/benoukraf_lab/matthew/data/mm10/mm10.fa'

    // Boilerplate options
    outdir                     = './results'
    publish_dir_mode           = 'copy'

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '64.GB'
    max_cpus                   = 32
    max_time                   = '240.h'

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

// import statement for execution profiles
profiles {
    laptop       { includeConfig 'conf/laptop.config'   }
    chia         { includeConfig 'conf/chia.config'     }
    server       { includeConfig 'conf/server.config'   }
    conda {
        params.enable_conda = true
        singularity.enabled = false
    }
    singularity {
        params.enable_conda = false
        singularity.enabled = true
        singularity.autoMounts = true
    }
}

//
// Generic process options for all workflows
//
process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withLabel:process_single {
        cpus = 1
        memory = 4.GB
        time = 6.h
    }

}

//
//  Process options for the pre-align workflow
//
if (params.workflow == 'pre-align') {

    process {

        withName: FASTQC {
            ext.prefix = { "${meta.id}" } 
        }
        
        withName: MULTIQC {
            ext.prefix = { "${meta.id}" } 
        }

    }

}

//
//  Process options for the trimming workflow
//
if (params.workflow == 'trimming') {

    process {

        withName: FASTQC {
            publishDir = [
                path: { "${params.outdir}/post_fastqc}" },
            ]
            ext.prefix = { "${meta.id}" } 
        }
        
        withName: MULTIQC {
            publishDir = [
                path: { "${params.outdir}/post_multiqc}" },
            ]
            ext.prefix = { "${meta.id}" } 
        }

        withName: TRIMMOMATIC {
            ext.prefix = { "${meta.id}" }
            ext.args = { [
                "SLIDINGWINDOW:4:20", "MINLEN:30"
            ].join(' ') }
        }

    }

}

withName: FASTP_CHIP {
    // should replace this with parameters
    // left this out due to short reads , "--length_required 30"
    ext.args = { [
        "--cut_right", "--cut_right_window_size 4", "--cut_right_mean_quality 20"
    ].join(' ') }
}

withName: POST_FASTQ_CHIP {
    ext.prefix = { "${meta.id}.trimmed" }
}

withName: STAR_ALIGN {
    ext.args = { [
        "--outSAMtype BAM Unsorted"
    ].join(' ') }
}